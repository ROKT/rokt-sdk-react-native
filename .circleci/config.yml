version: 2.1
jobs:
  checkout_code:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - persist_to_workspace:
          paths:
                - .
          root: .
  node_sdk:
    working_directory: ~/rokt-sdk-react-native/Rokt.Widget
    docker:
      - image: cimg/node:12.16

    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: npm install

      - run: npm pack

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - persist_to_workspace:
          paths:
                - .
          root: ~/rokt-sdk-react-native

  node:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp
    docker:
      - image: cimg/node:12.16

    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
    

      - run: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - persist_to_workspace:
          paths:
                - .
          root: ~/rokt-sdk-react-native

  deploy:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run: gem install fastlane
      - run: bundle install
      - run:
          name: fastlane tests
          command: |
            bundle exec fastlane publishSDK

  deployAlpha:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run: gem install fastlane
      - run: bundle install
      - run:
          name: fastlane tests
          command: |
            bundle exec fastlane publishAlphaSDK
            
  android-build-and-test:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    resource_class: large
    parameters:
        assemble_android_test:
            default: assembleAndroidTest
            description: Configure the android tests to run. Defaults to assembleAndroidTest
            type: string
        gradle_options:
            default: -Xmx2014m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+UnlockExperimentalVMOptions -XX:+HeapDumpOnOutOfMemoryError"
            description: Gradle command options. Note that setting this will override the default options so you might need to supply those as well.
            type: string
        java_options:
            default: -Xmx1024m -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport
            description: Java command options. Note that setting this will override the default options so you might need to supply those as well.
            type: string
        resource_class:
            default: xlarge
            description: Changes the resource class of the executor. Requires a support request to enable the resource_class parameter. See https://circleci.com/docs/2.0/configuration-reference/#resource_class
            type: string
        build_type:
            default: debug
            description: >-
              The build type to build. This is normally either "debug" or "release" but
              you may have custom build types configured for your app.
            type: string
        build_cache:
            default: true
            description: Should we cache after Gradle build? Defaults to true
            type: boolean

    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      
      - run: gem install fastlane

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - android_build:
          assemble_android_test: <<parameters.assemble_android_test>>
          build_type: <<parameters.build_type>>
          cache: <<parameters.build_cache>>
      - run: ./gradlew  assembleRelease
      - run:
          name: fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane build
            mv fastlane/report.xml test-results/fastlane
      - run:
          name: Build Android JS Bundle
          command: |
            ./gradlew --stop
            ./gradlew bundleReleaseJsAndAssets
      - run:
          name: Build Android APK
          command: |
            ./gradlew --stop
            ./gradlew assembleRelease -x bundleReleaseJsAndAssets 
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results
  
  iOS_build_and_test:
    macos:
      xcode: 13.3.1  
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/
    description: Builds the iOS app at the given path with the given build scheme and configuration. This should be run only after installing NPM dependencies.
    parameters:
        build_configuration:
            default: Debug
            description: The build configuration to use. This is normally either "Debug" or "Release" but you may have custom build configuration configured for your app.
            type: string
        cache:
            default: true
            description: Save and restore the build cache? Defaults to true
            type: boolean
        derived_data_path:
            default: ios/build
            description: The path to the directory to place the derived data, relative to the root of the repository.
            type: string
        device:
            default: iPhone 13
            description: The type of device you want to build for.
            type: string
        project_path:
            description: The path to the Xcode project (*.xcodeproj) or the Xcode workspace (*.xcworkspace) that you want to build, relative to the root of the repository.
            type: string
            default: ios/RoktSampleApp.xcworkspace
        project_type:
            default: workspace
            description: If the iOS app is built using a project file (*.xcodeproj) or a workspace.
            enum:
                - project
                - workspace
            type: enum
        pod_install_directory:
            default: ios
            description: The location of the "ios" directory
            type: string
        scheme:
            default: RoktSampleApp
            description: The scheme to use.
            type: string
        yarn_cache_folder:
            default: /tmp/checksumfiles
            description: The path to the yarn cache folder.  Defaults to /tmp/yarn
            type: string
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      # run simulator on background
      - run:
          background: true
          command: xcrun simctl boot "<<parameters.device>>" || true
          name: Start iOS simulator (background)

      # install yarn
      - run:
          command: |
              mkdir -p ~/.tmp/checksumfiles
              find . -type f -name 'package.json' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/package.json
              find . -type f -name 'yarn.lock' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/yarn.lock
          name: Create cache checksum file
      - restore_cache:
          keys:
              - yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/yarn.lock" }}-{{ .Environment.CACHE_VERSION }}
      - run:
          command: yarn install --frozen-lockfile --non-interactive --cache-folder <<parameters.yarn_cache_folder>>
          name: Yarn Install
      - save_cache:
          key: |
              yarn-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ checksum "~/.tmp/checksumfiles/yarn.lock" }}-{{ .Environment.CACHE_VERSION }}
          paths:
              - <<parameters.yarn_cache_folder>>
      # pod cache and install
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-cache-pods'

      - run:
          name: Install CocoaPods
          command: |
            cd <<parameters.pod_install_directory>> && pod install && cd -

      - save_cache:
          key: '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
          paths:
            - <<parameters.pod_install_directory>>/Pods

      - restore_cache:
          keys:
            - ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Restoring iOS Build caches
      - run:
          name: Build iOS App
          command: export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -<<parameters.project_type>> <<parameters.project_path>> -destination 'platform=iOS Simulator,name=<<parameters.device>>' -scheme <<parameters.scheme>> -parallelizeTargets -configuration <<parameters.build_configuration>> -derivedDataPath <<parameters.derived_data_path>>  -UseModernBuildSystem=YES | xcpretty -k
      - save_cache:
          key: ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Saving iOS Build Cache
          paths:
              - <<parameters.derived_data_path>>/Build
workflows:
  build_test_deploy-RN:
    jobs:
      - checkout_code
      - node_sdk:
          requires:
            - checkout_code
      - node:
          requires:
            - node_sdk
      - iOS_build_and_test:
          requires:
            - node
      # - android-build-and-test:
      #     requires:
      #       - node
      # - hold: # <<< A job that will require manual approval in the CircleCI web application.
      #     type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
      #     requires: # We only run the "hold" job when android-build-and-test has succeeded
      #       - android-build-and-test
      # - deployAlpha:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         ignore: /release-(.*)/
      # - deploy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only: /release-(.*)/
commands:
    android_build:
        description: Builds the Android app at the given path with the given build types. This should be run only after installing dependencies.
        parameters:
            assemble_android_test:
                default: assembleAndroidTest
                description: Configure the android tests to run. Defaults to assembleAndroidTest but you might want to set to app:assembleAndroidTest if that works for your project
                type: string
            build_type:
                default: debug
                description: The build type to build. This is normally either "debug" or "release" but you may have custom build types configured for your app.
                type: string
            cache:
                default: true
                description: Save and restore the caches? Defaults to true
                type: boolean
            project_path:
                default: .
                description: The path to the root of the Android project you want to build, relative to the root of the repository.
                type: string
        steps:
            - when:
                condition: <<parameters.cache>>
                steps:
                    - run:
                        command: |
                            mkdir -p ~/.tmp/checksumfiles
                            find . -type f -name 'build.gradle' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/build.gradle
                            find . -type f -name 'settings.gradle' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/settings.gradle
                        name: Create cache checksum files
                    - restore_cache:
                        keys:
                            - gradle-wrapper-{{ arch }}-{{ checksum "<<parameters.project_path>>/gradle/wrapper/gradle-wrapper.properties" }}-{{ .Environment.CACHE_VERSION }}
                    - restore_cache:
                        keys:
                            - gradle-home-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/build.gradle" }}-{{ checksum "~/.tmp/checksumfiles/settings.gradle" }}-{{ .Environment.CACHE_VERSION }}
                    - restore_cache:
                        keys:
                            - gradle-build-cache-{{ .Revision }}
                        name: Restoring Gradle Build caches
            - run:
                command: |
                    [ -d ~/gradle-build-caches ] &&
                      [ -n "$(ls -A ~/gradle-build-caches)" ] &&
                      rm -rf ~/.gradle/caches/build-cache-* &&
                      mkdir -p ~/.gradle/caches/ &&
                      mv ~/gradle-build-caches/* ~/.gradle/caches/ || true
                name: Dispersing Gradle Build caches for restoring
            - run:
                command: cd <<parameters.project_path>> && chmod +x gradlew && ./gradlew --max-workers 2 downloadDependencies
                name: Downloading Gradle Dependencies
            - when:
                condition: <<parameters.cache>>
                steps:
                    - save_cache:
                        key: gradle-wrapper-{{ arch }}-{{ checksum "<<parameters.project_path>>/gradle/wrapper/gradle-wrapper.properties" }}-{{ .Environment.CACHE_VERSION }}
                        name: Saving Gradle wrapper cache
                        paths:
                            - ~/.gradle/wrapper/
                    - save_cache:
                        key: gradle-home-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/build.gradle" }}-{{ checksum "~/.tmp/checksumfiles/settings.gradle" }}-{{ .Environment.CACHE_VERSION }}
                        name: Saving Gradle home cache
                        paths:
                            - ~/.gradle/caches/
            - run:
                command: cd <<parameters.project_path>> && chmod +x gradlew && ./gradlew --build-cache --max-workers 2 --continue --no-daemon assemble<<parameters.build_type>> <<parameters.assemble_android_test>> -DtestBuildType=<<parameters.build_type>> --stacktrace
                name: Build Android APK
            - when:
                condition: <<parameters.cache>>
                steps:
                    - run:
                        command: |
                            mkdir -p ~/gradle-build-caches
                            [ -d ~/.gradle/caches ] &&
                              [ -n "$(ls -Ad ~/.gradle/caches/build-cache-* 2>/dev/null)" ] &&
                              rm -rf ~/gradle-build-caches/* &&
                              mv ~/.gradle/caches/build-cache-* ~/gradle-build-caches || true
                        name: Collecting Gradle Build caches for saving
                        when: always
                    - save_cache:
                        key: gradle-build-cache-{{ .Revision }}
                        name: Saving Gradle Build caches
                        paths:
                            - ~/gradle-build-caches
                        when: always
