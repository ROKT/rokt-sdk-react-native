version: 2.1
jobs:
  checkout_code:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - persist_to_workspace:
          paths:
                - .
          root: .
  node_sdk:
    working_directory: ~/rokt-sdk-react-native/Rokt.Widget
    docker:
      - image: cimg/node:12.16

    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: npm install

      - run: npm pack

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - persist_to_workspace:
          paths:
                - .
          root: ~/rokt-sdk-react-native

  node:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp
    docker:
      - image: cimg/node:12.16

    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
    

      - run: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules
      - persist_to_workspace:
          paths:
                - .
          root: ~/rokt-sdk-react-native

  deploy:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run: gem install fastlane
      - run: bundle install
      - run:
          name: fastlane tests
          command: |
            bundle exec fastlane publishSDK

  deployAlpha:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run: gem install fastlane
      - run: bundle install
      - run:
          name: fastlane tests
          command: |
            bundle exec fastlane publishAlphaSDK
  
  android-build-run-ui-test:
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/android
    docker:
      - image: reactnativecommunity/react-native-android
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run: gem install fastlane
      - run: bundle install
      - run:
          name: fastlane UI tests
          command: |
            bundle exec fastlane deviceFarmUITest
      - store_artifacts:
          path: app/build/outputs/apk/debug
  
  iOS_build_and_test:
    macos:
      xcode: 13.3.1  
    working_directory: ~/rokt-sdk-react-native/RoktSampleApp/
    description: Builds the iOS app at the given path with the given build scheme and configuration. This should be run only after installing NPM dependencies.
    parameters:
        build_configuration:
            default: Debug
            description: The build configuration to use. This is normally either "Debug" or "Release" but you may have custom build configuration configured for your app.
            type: string
        cache:
            default: true
            description: Save and restore the build cache? Defaults to true
            type: boolean
        derived_data_path:
            default: ios/build
            description: The path to the directory to place the derived data, relative to the root of the repository.
            type: string
        device:
            default: iPhone 13
            description: The type of device you want to build for.
            type: string
        project_path:
            description: The path to the Xcode project (*.xcodeproj) or the Xcode workspace (*.xcworkspace) that you want to build, relative to the root of the repository.
            type: string
            default: ios/RoktSampleApp.xcworkspace
        project_type:
            default: workspace
            description: If the iOS app is built using a project file (*.xcodeproj) or a workspace.
            enum:
                - project
                - workspace
            type: enum
        pod_install_directory:
            default: ios
            description: The location of the "ios" directory
            type: string
        scheme:
            default: RoktSampleApp
            description: The scheme to use.
            type: string
    steps:
      - attach_workspace:
          at: ~/rokt-sdk-react-native
      - run:
          command: |
              mkdir -p ~/.tmp/checksumfiles
              find . -type f -name 'package.json' -not -path "*node_modules*" -exec cat {} + >> ~/.tmp/checksumfiles/package.json
          name: Create cache checksum file
      # run simulator on background
      - run:
          background: true
          command: xcrun simctl boot "<<parameters.device>>" || true
          name: Start iOS simulator (background)
      # pod cache and install
      - restore_cache:
          keys:
            - '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
            - '{{ .Environment.CACHE_VERSION }}-cache-pods'
      - run:
          name: Start ReactNative
          command: npx react-native start
          background: true
      - run:
          name: Install CocoaPods
          command: |
            cd <<parameters.pod_install_directory>> && pod install && cd -

      - save_cache:
          key: '{{ .Environment.CACHE_VERSION }}-cache-pods-{{ checksum "<<parameters.pod_install_directory>>/Podfile.lock" }}'
          paths:
            - <<parameters.pod_install_directory>>/Pods

      - restore_cache:
          keys:
            - ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Restoring iOS Build caches
      - run:
          name: Test iOS App
          command: export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -<<parameters.project_type>> <<parameters.project_path>> -destination 'platform=iOS Simulator,name=<<parameters.device>>' -scheme <<parameters.scheme>> -parallelizeTargets -configuration <<parameters.build_configuration>> -derivedDataPath <<parameters.derived_data_path>>  -UseModernBuildSystem=YES test | xcpretty -k
      - save_cache:
          key: ios-build-cache-{{ arch }}-{{ checksum "~/.tmp/checksumfiles/package.json" }}-{{ .Environment.CACHE_VERSION }}
          name: Saving iOS Build Cache
          paths:
              - <<parameters.derived_data_path>>/Build
workflows:
  build_test_deploy-RN:
    jobs:
      - checkout_code
      - node_sdk:
          requires:
            - checkout_code
      - node:
          requires:
            - node_sdk
      - android-build-run-ui-test:
          requires:
            - node
      - iOS_build_and_test:
          requires:
            - node
      - hold: # <<< A job that will require manual approval in the CircleCI web application.
          type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
          requires: # We only run the "hold" job when android-build-run-ui-test and iOS_build_and_test has succeeded
            - android-build-run-ui-test
            - iOS_build_and_test
      - deployAlpha:
          requires:
            - hold
          filters:
            branches:
              ignore: /release-(.*)/
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only: /release-(.*)/
